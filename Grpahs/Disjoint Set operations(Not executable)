#include <bits/stdc++.h>

using namespace std;

int parent[100000];
int rank[100000];

void makeset(int n){
    for(auto i=1;i<=n;i++){
        parent[i]=i;
        rank[i]=0;
    }
}

int findPar(int node){
    if(node==parent[node]){
        return node;
    }
    
    return parent[node]=findPar(parent[node]);
}


void Union(int u,int v){
    u=findPar(u);
    v=findPar(v);
    
    if(rank[u]<rank[v]){
        parent[u]=v;
    }
    else if(rank[v]<rank[u]){
        parent[v]=u;
    }
    else{
        parent[v]=u;
        rank[u]++;
    }
}
int main()
{
    int n;
    cin>>n;
    makeset(n);
    int m;
    cin>>m;
    while(m--){
        int u,v;
        union(u,v)
    }
    // find two nodes are in same component or not
    int a,b;
    cin>>a>>b;
    if(findPar(a)!=findPar(b)){
        cout<<"differnt components"<<endl;
    }
    else{
        cout<<"same components"<<endl;
    }

    return 0;
}
